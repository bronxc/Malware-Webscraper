import sys
import os
import WebscraperUtilities
from androidApp import androidApp


def main():
    
    toolKeywords = WebscraperUtilities.getKeywords(sys.argv[1])
    global appList
    appList = []

    for keyword in toolKeywords:
        pageNumber = 1
        requestString = "https://packetstormsecurity.com/search/files/page" + str(pageNumber) + "/?q=" + keyword + "&s=files"
        bs = WebscraperUtilities.getBeautifulSoupWebsiteSourceAllowRedirects(requestString)
        while(isResults(bs)):
            addAllApps(bs)
            pageNumber = pageNumber + 1
            requestString = "https://packetstormsecurity.com/search/files/page" + str(pageNumber) + "/?q=" + keyword + "&s=files"
            bs = WebscraperUtilities.getBeautifulSoupWebsiteSourceAllowRedirects(requestString)
        
        WebscraperUtilities.writeJsonFile(sys.argv[1], os.path.basename(__file__), appList)

def addAllApps(bs):
    appTableRows = getAppTableRows(bs)
    for row in appTableRows:
        try:
            aTag = row.find("dt").find("a", href=True)
            appLink = "www.oldversion.com" + aTag['href']
            currentApp = androidApp(aTag.get_text(), appLink)
            appAuthor = row.find("dd", {"class" : "refer"}).find("a").get_text()
            appDescription = row.find("dd", {"class" : "detail"}).find("p").get_text()
            currentApp.setAuthor(appAuthor)
            currentApp.setDescription(appDescription)
            versionATag = row.find("dd", {"class" : "act-links"}).find("a", href=True)
            if ".txt" in versionATag['href']:
                raise Exception("This is a text file don't add app to list")
            currentApp.addVersion(aTag.get_text(), "www.packetstormsecurity.com" + versionATag['href'])
            appList.append(currentApp)
        except:
            pass

def getAppTableRows(bs):
    try:
        tableRows = bs.findAll("dl", {"class" : "file"})
        tableRows.append(bs.find("dl", {"class" : "file first"}))
        return tableRows
    except:
        return []

def isResults(bs):
    results = True
    try:
        results = bs.find("div", {"id" : "m"}).find("h1").get_text() != "No Results Found"
    except:
        return False
    return results

if __name__ == '__main__':
    main()