import requests
import sys
import os
import json
import time
from bs4 import BeautifulSoup
from androidApp import androidApp
import WebscraperUtilities

def main():
    
    toolKeywords = WebscraperUtilities.getKeywords(sys.argv[1])
    global appList
    appList = []

    for keyword in toolKeywords:
        pageNumber = 1
        requestString = "http://www.oldversion.com/search?query=" + keyword + "&page=" + str(pageNumber)
        bs = WebscraperUtilities.getBeautifulSoupWebsiteSource(requestString)
        while(not is500ErrorOrNoResults(bs)):
            addAllApps(bs)
            pageNumber = pageNumber + 1
            requestString = "http://www.oldversion.com/search?query=" + keyword + "&page=" + str(pageNumber)
            bs = WebscraperUtilities.getBeautifulSoupWebsiteSource(requestString)

def addAllApps(bs):
    appTableRows = getAppTableRows(bs)
    for row in appTableRows:
        aTag = row.find("h3").find("a", href=True)
        appLink = "www.oldversion.com" + aTag['href']
        currentApp = androidApp(aTag.get_text(), appLink)
        addAppInfo(currentApp)

def getAppTableRows(bs):
    try:
        tableRows = bs.findAll("tr", {"class" : "b-software-list-item"})
        return tableRows[1:]
    except:
        return []

def addAppInfo(app):
    appBs = WebscraperUtilities.getBeautifulSoupWebsiteSource(app.link)
    appAuthor = appBs.find("div", {"class" : "column flR meta-data"}).findAll("li")[1].find("span").get_text()
    appDescription = appBs.find("div", {"class" : "description"}).find("p").get_text()
    appVersions = getAppVersions(appBs)

def getAppVersions(bs):
    versionRows = bs.find("tbody").findAll("tr")

def is500ErrorOrNoResults(bs):
    fiveHundredError = bs.find("div", {"id" : "container"}).find("h1").get_text() == "Oops! An Error Occurred"
    try:
        noResults = bs.findAll("td", {"class" : "category-programs-list_ads"})[1].find("h3").get_text() == "No results found"
    except:
        noResults = False
    if(fiveHundredError or noResults):
        return True
    return False

if __name__ == '__main__':
    main()