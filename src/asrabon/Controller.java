package asrabon;

import javafx.collections.FXCollections;
import javafx.collections.ObservableArray;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.awt.*;
import java.io.*;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.function.Predicate;
import java.util.regex.Pattern;

public class Controller {

    @FXML
    private ComboBox websiteDropdown;
    @FXML
    private ComboBox toolDropdown;
    @FXML
    private ListView appListView;
    @FXML
    private ListView versionList;
    @FXML
    private Label nameLabel;
    @FXML
    private Label authorLabel;
    @FXML
    private TextArea descriptionText;
    @FXML
    private CheckBox cacheCheckbox;
    @FXML
    private ProgressIndicator progressSpinner;
    @FXML
    private TextField searchField;
    @FXML
    private Button cancelSearchButton;

    private Map<String, AndroidApp> appList;
    private Thread searchThread = new Thread();
    private Comparator<String> naturalOrder = Comparator.naturalOrder();
    private Comparator<String> reverseOrder = Comparator.reverseOrder();

    @FXML
    public void beginSearch() {
        if(!searchThread.isAlive()) {
            Runnable searchRunnable = createSearchRunnable();
            searchThread = new Thread(searchRunnable);
            searchThread.start();
        }
    }

    @FXML
    public void cancelSearch() {
        if(searchThread.isAlive()) {
            searchThread.interrupt();
        }
    }

    @FXML
    public void setItemInfo() {
        String appName = appListView.getSelectionModel().getSelectedItem().toString();
        System.out.println(appName);
        AndroidApp app = appList.get(appName);
        nameLabel.setText("Name: " + app.getName());
        authorLabel.setText("Author: " + app.getAuthor());
        descriptionText.setText(app.getDescription());
        ObservableList<String> sortedVersionList = FXCollections.observableArrayList(app.getVersionToLink().keySet());
        sortedVersionList.sort(reverseOrder);
        versionList.setItems(sortedVersionList);
    }

    @FXML
    public void downloadVersion(MouseEvent event) throws URISyntaxException, IOException {
        String appName = appListView.getSelectionModel().getSelectedItem().toString();
        AndroidApp app = appList.get(appName);
        String version = versionList.getSelectionModel().getSelectedItem().toString();
        Desktop.getDesktop().browse(new URI((app.getVersionToLink().get(version)).toString()));
    }

    @FXML
    public void openCurrentDirectory() throws IOException {
        Path currentRelativePath = Paths.get("keywords/");
        Desktop.getDesktop().open(currentRelativePath.toAbsolutePath().toFile());
    }

    @FXML
    private void filterList() {
        String searchWord = searchField.getText().toString();
        Predicate<String> findAppsWithKeyword = appName -> appName.contains(searchWord);
        appListView.setItems(FXCollections.observableArrayList(filterMap(appList, searchWord).keySet()));
    }

    @FXML
    private void handleSearchFieldKeyPress(KeyEvent event) {
        if(event.getCode().equals(KeyCode.ENTER)) {
            filterList();
        }
    }

    @FXML
    private void handleAppListKeyPress(KeyEvent event) throws InterruptedException {
        KeyCode keyPressed = event.getCode();
        int currentIndex = appListView.getSelectionModel().getSelectedIndex();
        if(keyPressed.equals(KeyCode.KP_UP)) {
            appListView.getSelectionModel().selectPrevious();
        } else if(keyPressed.equals(KeyCode.KP_DOWN)) {
            appListView.getSelectionModel().selectNext();
        }
        setItemInfoNonFXML();
    }

    private Runnable createSearchRunnable() {
        Runnable runnable = () -> {
            try {
                appList = new HashMap<>();
                progressSpinner.setVisible(true);
                //get basic info from gui of what the user selected
                String toolToSearch = toolDropdown.getSelectionModel().getSelectedItem().toString().replace(" ", "_");
                String websiteToSearch = websiteDropdown.getSelectionModel().getSelectedItem().toString();
                String websiteDomain = websiteToSearch.split("\\.")[1];
                String toolFileName = "\"" + toolToSearch + ".txt\"";
                String jsonFileName = "cached/" + toolToSearch + "_" + websiteDomain + ".json";
                if(!cacheCheckbox.isSelected() || !cacheFileAvailable(toolToSearch, websiteDomain)) {
                    //run the python script in the command line with the given website and tool
                    ProcessBuilder pBuilder = new ProcessBuilder(new String[]
                                    {"python",
                                    "scripts/" + websiteDomain + ".py",
                                    toolFileName});
                    Process p = pBuilder.start();
                    //wait for the python script to finish executing
                    p.waitFor();
                    writeErrorLog(p);
                }
                //USED FOR DEBUGGING
                System.out.println("Done with scraping!");
                //create a string out of the contents of the json file
                String jsonData = readJsonFile(jsonFileName);
                //USED FOR DEBUGGING
                System.out.println("Done with reading json file!");
                //create a json array out of the string representation of the json file
                addAllAppsToList(jsonData);
                //Populate the list view with all the apps in sorted order
                ObservableList<String> sortedAppList = FXCollections.observableArrayList(appList.keySet());
                sortedAppList.sort(naturalOrder);
                appListView.setItems(sortedAppList);
            } catch (IOException | JSONException | InterruptedException e) {
                try(PrintWriter writer = new PrintWriter(new FileWriter("Java_Error.log", true))) {
                    e.printStackTrace(writer);
                } catch (IOException e1) {
                    System.exit(1);
                }
            } finally {
                progressSpinner.setVisible(false);
            }};
        return runnable;
    }

    private boolean cacheFileAvailable(String toolToSearch, String websiteDomain) {
        File f = new File("cached/" + toolToSearch + "_" + websiteDomain + ".json");
        return f.exists() ? true : false;
    }

    private void addAllAppsToList(String data) throws JSONException {
        JSONArray array = new JSONArray(data);
        for(int i=0; i<array.length(); i++) {
            JSONObject currentJsonApp = array.getJSONObject(i);
            String name = currentJsonApp.getString("name");
            String link = currentJsonApp.getString("link");
            String author = currentJsonApp.getString("author");
            String description = currentJsonApp.getString("description");
            JSONObject appVersions = currentJsonApp.getJSONObject("appVersions");
            Map<String, String> appVersionToLink = new HashMap<>();
            Iterator versionIterator = appVersions.keys();
            while(versionIterator.hasNext()) {
                String appVersion = versionIterator.next().toString();
                appVersionToLink.put(appVersion, appVersions.getString(appVersion));
            }
            appList.put(name, new AndroidApp(name, author, link, description, appVersionToLink));
        }
    }

    private String readJsonFile(String jsonFileName) throws IOException {
        String s = "";
        try(BufferedReader in = Files.newBufferedReader(Paths.get(jsonFileName))) {
            String line;
            while((line = in.readLine()) != null) {
                s += line + "\n";
            }
        }
        return s;
    }

    private void writeErrorLog(Process p) throws IOException {
        //try with resources to create a writer for a file that will contain error log from python code
        try(PrintWriter writer = new PrintWriter(new FileWriter("Python_Error.log"))) {
            //try with resources to create a input stream to the error log if applicable
            try(InputStream stream = p.getErrorStream()) {
                //continue to write to the file for everything that is available in the error stream
                for (int i = 0; i < stream.available(); i++) {
                    writer.write(stream.read());
                }
            }
        }
    }

    private Map<String, AndroidApp> filterMap(Map<String, AndroidApp> original, String searchWord) {
        Map<String, AndroidApp> filteredMap = new HashMap<>();
        for(String s : original.keySet()) {
            if(Pattern.compile(Pattern.quote(searchWord), Pattern.CASE_INSENSITIVE).matcher(s).find()) {
                filteredMap.put(s, original.get(s));
            }
        }
        return filteredMap;
    }

    public void setItemInfoNonFXML() {
        String appName = appListView.getSelectionModel().getSelectedItem().toString();
        System.out.println(appName);
        AndroidApp app = appList.get(appName);
        nameLabel.setText("Name: " + app.getName());
        authorLabel.setText("Author: " + app.getAuthor());
        descriptionText.setText(app.getDescription());
        versionList.setItems(FXCollections.observableArrayList(app.getVersionToLink().keySet()));
    }

}
