package asrabon;

import javafx.collections.FXCollections;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.input.MouseEvent;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.awt.*;
import java.io.*;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;

public class Controller {

    @FXML
    private Button searchButton;
    @FXML
    private ComboBox websiteDropdown;
    @FXML
    private ComboBox toolDropdown;
    @FXML
    private ListView appListView;
    @FXML
    private ListView versionList;
    @FXML
    private Label nameLabel;
    @FXML
    private Label authorLabel;
    @FXML
    private TextArea descriptionText;
    @FXML
    private CheckBox cacheCheckbox;

    private Map<String, AndroidApp> appList = new HashMap<>();

    @FXML
    public void beginSearch() {
        Thread searchThread = createSearchThread();
        searchThread.start();
    }

    @FXML
    public void setItemInfo(MouseEvent event) {
        String appName = appListView.getSelectionModel().getSelectedItem().toString();
        AndroidApp app = appList.get(appName);
        nameLabel.setText("Name: " + app.getName());
        authorLabel.setText("Author: " + app.getAuthor());
        descriptionText.setText(app.getDescription());
        versionList.setItems(FXCollections.observableArrayList(app.getVersionToLink().keySet()));
    }

    @FXML
    public void downloadVersion(MouseEvent event) throws URISyntaxException, IOException {
        String appName = appListView.getSelectionModel().getSelectedItem().toString();
        AndroidApp app = appList.get(appName);
        String version = versionList.getSelectionModel().getSelectedItem().toString();
        Desktop.getDesktop().browse(new URI((app.getVersionToLink().get(version)).toString()));
    }

    @FXML
    public void openCurrentDirectory() throws IOException {
        Path currentRelativePath = Paths.get("keywords/");
        Desktop.getDesktop().open(currentRelativePath.toAbsolutePath().toFile());
    }

    private Thread createSearchThread() {
        Thread thread = new Thread(() -> {
            try {
                //get basic info from gui of what the user selected
                String toolToSearch = toolDropdown.getSelectionModel().getSelectedItem().toString().replace(" ", "_");
                String websiteToSearch = websiteDropdown.getSelectionModel().getSelectedItem().toString();
                String websiteDomain = websiteToSearch.split("\\.")[1];
                String toolFileName = "\"" + toolToSearch + ".txt\"";
                String jsonFileName = "cached/" + toolToSearch + "_" + websiteDomain + ".json";
                if(!cacheCheckbox.isSelected() || !cacheFileAvailable(toolToSearch, websiteDomain)) {
                    //run the python script in the command line with the given website and tool
                    ProcessBuilder pBuilder = new ProcessBuilder(new String[]
                                    {"python",
                                    websiteDomain + ".py",
                                    toolFileName});
                    Process p = pBuilder.start();
                    //wait for the python script to finish executing
                    p.waitFor();
                    writeErrorLog(p);
                }
                //USED FOR DEBUGGING
                System.out.println("Done with scraping!");
                //create a string out of the contents of the json file
                String jsonData = readJsonFile(jsonFileName);
                //USED FOR DEBUGGING
                System.out.println("Done with reading json file!");
                //create a json array out of the string representation of the json file
                addAllAppsToList(jsonData);
                //Populate the list view with all the apps
                appListView.setItems(FXCollections.observableArrayList(appList.keySet()));
            } catch (IOException | JSONException | InterruptedException e) {
                try(PrintWriter writer = new PrintWriter(new FileWriter("error.log", true))) {
                    e.printStackTrace(writer);
                } catch (IOException e1) {
                    System.exit(1);
                }
            }
        });
        return thread;
    }

    private boolean cacheFileAvailable(String toolToSearch, String websiteDomain) {
        File f = new File("cached/" + toolToSearch + "_" + websiteDomain + ".json");
        return f.exists() ? true : false;
    }

    private void addAllAppsToList(String data) throws JSONException {
        JSONArray array = new JSONArray(data);
        for(int i=0; i<array.length(); i++) {
            JSONObject currentJsonApp = array.getJSONObject(i);
            String name = currentJsonApp.getString("name");
            String link = currentJsonApp.getString("link");
            String author = currentJsonApp.getString("author");
            String description = currentJsonApp.getString("description");
            JSONObject appVersions = currentJsonApp.getJSONObject("appVersions");
            Map<String, String> appVersionToLink = new HashMap<>();
            Iterator versionIterator = appVersions.keys();
            while(versionIterator.hasNext()) {
                String appVersion = versionIterator.next().toString();
                appVersionToLink.put(appVersion, appVersions.getString(appVersion));
            }
            appList.put(name, new AndroidApp(name, author, link, description, appVersionToLink));
        }
    }

    private String readJsonFile(String jsonFileName) throws IOException {
        String s = "";
        try(BufferedReader in = Files.newBufferedReader(Paths.get(jsonFileName))) {
            String line;
            while((line = in.readLine()) != null) {
                s += line + "\n";
            }
        }
        return s;
    }

    private void writeErrorLog(Process p) throws IOException {
        //try with resources to create a writer for a file that will contain error log from python code
        try(PrintWriter writer = new PrintWriter(new FileWriter("Python_Error_Log.txt"))) {
            //try with resources to create a input stream to the error log if applicable
            try(InputStream stream = p.getErrorStream()) {
                //continue to write to the file for everything that is available in the error stream
                for (int i = 0; i < stream.available(); i++) {
                    writer.write(stream.read());
                }
            }
        }
    }

}
