import requests
import sys
import os
import json
import time
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from androidApp import androidApp

def main():
    driverPath = os.getcwd() + "\chromedriver.exe"
    global driver
    driver = webdriver.Chrome(driverPath)


    keywordFile = os.getcwd() + "/keywords/" + sys.argv[1]
    toolKeywords = []
    with open(keywordFile, 'r') as file:
        for line in file.readlines():
            toolKeywords.append(line.strip('\n'))
    global androidAppList
    androidAppList = []

    #for all the keywords in the anti-forensics keywords list, it will go through the apkpure.com
    #website to scrape all the information from every anti-forensics app it can find
    for keyword in toolKeywords:
        pageNumber = 1
        #request string for a query on apkpure.com searching with a keyword
        requestString = "http://en.uptodown.com/android/as?search=" + keyword + "&pag=" + str(pageNumber) + "&num=16"
        appPageSource = getBeautifulSoupWebsiteSource(requestString)
        while(appPageSource.getText() != ""):
            addAllApps(appPageSource)
            pageNumber = pageNumber + 1
            requestString = "http://en.uptodown.com/android/as?search=" + keyword + "&pag=" + str(pageNumber) + "&num=16"
            appPageSource = getBeautifulSoupWebsiteSource(requestString)
    
    with open('apps.json', 'w') as file:
        file.write("[\n")
        file.write(json.dumps(androidAppList[0].__dict__))
        for i in range(1, len(androidAppList)):
            file.write(",\n")
            file.write(json.dumps(androidAppList[i].__dict__))
        file.write("\n]")

    driver.quit()

def getBeautifulSoupWebsiteSource(link):
    req = requests.get(link, allow_redirects=False)
    webpageContent = req.content
    return BeautifulSoup(webpageContent, "html.parser")

def addAllApps(pageSource):
    appLinksList = []
    addAppLinks(pageSource, appLinksList)
    createAndAppendApps(appLinksList)

def addAppLinks(pageSource, linkList):
    aTags = pageSource.find_all("a", href=True)
    for aTag in aTags:
        linkList.append(aTag['href'])

def createAndAppendApps(appLinks):
    for link in appLinks:
        try:
            pageSource = getBeautifulSoupWebsiteSource(link)
            olderVersionSource = getBeautifulSoupWebsiteSource(link + "/old")
            addAppInfo(pageSource, olderVersionSource, link)
        except Exception as e:
            print(e)

def getAllVersions(app, appLink, olderVersionSource):
    olderVersionSource = getBeautifulSoupWebsiteSource(appLink + "/old")
    versionDivs = olderVersionSource.find("div", {"class" : "row-gallery"}).find_all("div", {"class" : "item"})
    for version in versionDivs:
        versionNumber = version.find("span", {"class" : "app_card_version"}).getText()
        versionATag = version.find("a" , href=True)
        versionLink = versionATag['href']
        app.addVersion(versionNumber, versionLink)
        
def addAppInfo(pageSource, olderVersionSource, appLink):
    appName = pageSource.find("h1", {"class" : "name"}).getText()
    appAuthor = pageSource.find("div", {"class" : "author"}).find("span").getText()
    try:
        appDescription = pageSource.find("div", {"class" : "more-info-content"}).find("p").getText()
    except:
        appDescription = "N/A"
    currentApp = androidApp(appName, appLink)
    currentApp.setAuthor(appAuthor)
    currentApp.setDescription(appDescription)
    getAllVersions(currentApp, appLink, olderVersionSource)
    androidAppList.append(currentApp)

if __name__ == '__main__':
    main()